/**
 * 五行分析器
 */
export class WuxingAnalyzer {
    // 五行相生关系：木生火，火生土，土生金，金生水，水生木
    static SHENG_RELATION = {
        '木': '火',
        '火': '土',
        '土': '金',
        '金': '水',
        '水': '木'
    }

    // 五行相克关系：木克土，土克水，水克火，火克金，金克木
    static KE_RELATION = {
        '木': '土',
        '土': '水',
        '水': '火',
        '火': '金',
        '金': '木'
    }
    // 五行对应的汉字
    static WUXING_CHARS = {
        '木': [
            // 植物类
            '林', '森', '树', '木', '松', '柏', '杨', '柳', '梅', '桃', '李', '果',
            '花', '草', '芳', '芝', '芬', '苑', '苗', '茂', '荣', '华', '菊', '萍',
            '蓝', '蕾', '薇', '藤', '萱', '莲', '荷', '竹', '筱', '箫', '策', '简',
            '桂', '槐', '梧', '桐', '枫', '榆', '楠', '栋', '梓', '楚', '榕', '桢',
            '栗', '桨', '檀', '樱', '樟', '橘', '椿', '槟', '榴', '橙', '桔', '橄',
            // 青绿类
            '青', '绿', '翠', '碧', '茵', '茂', '葱', '葫', '葵', '葡', '董', '蒂',
            '蒙', '蓉', '薄', '藻', '蔷', '蔚', '萌', '萧', '萍', '莹', '菲', '菁',
            '菡', '菱', '萝', '莎', '莺', '莲', '莉', '茉', '茜', '茗', '茵', '茹',
            // 木字旁
            '杰', '权', '棋', '栩', '梦', '梵', '楷', '椒', '椰', '楼', '榻', '模',
            '槿', '檬', '檀', '樊', '橡', '樨', '橹', '橦', '櫆', '榘', '楫', '椭'
        ],
        '火': [
            // 火光类
            '火', '炎', '焱', '燃', '焰', '煌', '炜', '炳', '烈', '烽', '焕', '煜',
            '灿', '烨', '炫', '晖', '辉', '晨', '旭', '昕', '明', '亮', '光', '晶',
            '晴', '晓', '曙', '朝', '阳', '日', '昌', '昊', '昆', '易', '昱', '晋',
            // 太阳光明类
            '照', '耀', '晔', '晗', '晞', '晟', '晤', '晧', '晰', '暄', '暖', '暝',
            '晦', '晡', '晢', '晣', '晥', '晪', '晫', '晬', '晭', '普', '景', '晰',
            // 红赤类
            '红', '赤', '丹', '朱', '彤', '赫', '炫', '烁', '熠', '焯', '烂', '灼',
            '煊', '煌', '熙', '熹', '熔', '熏', '燎', '燔', '爝', '爨', '爻', '爽',
            // 心情类（火主神明）
            '忻', '怡', '恺', '悦', '愉', '愈', '慧', '智', '思', '恩', '慈', '怀',
            '德', '志', '忠', '恒', '悟', '惠', '慕', '慎', '憬', '懿', '敏', '聪'
        ],
        '土': [
            // 土地类
            '土', '地', '坤', '垚', '培', '城', '堂', '塘', '境', '墨', '坚', '均',
            '坦', '垠', '型', '垒', '埂', '域', '培', '基', '堡', '塔', '墩', '增',
            '壁', '壤', '士', '佳', '住', '延', '庭', '院', '阔', '野', '田', '畴',
            // 山石类
            '山', '岩', '峰', '岭', '崖', '峻', '嵩', '岚', '峦', '崇', '峡', '峙',
            '嶂', '嵘', '巅', '巍', '屹', '岘', '峰', '峻', '崔', '崎', '崛', '崧',
            // 玉石类
            '玉', '玮', '璋', '璧', '瑜', '瑶', '琪', '琳', '珍', '珠', '珊', '珂',
            '琛', '琬', '琰', '琨', '琦', '琢', '琪', '琫', '琮', '琯', '琰', '琲',
            // 厚重类
            '厚', '重', '稳', '实', '敦', '墩', '壮', '圆', '园', '围', '国', '圃',
            '圆', '团', '固', '坚', '牢', '稳', '安', '宁', '康', '泰', '和', '平'
        ],
        '金': [
            // 金属类
            '金', '银', '铜', '铁', '钢', '锐', '锋', '钊', '钧', '铭', '锦', '镇',
            '鑫', '鉴', '钰', '钱', '钟', '铃', '镜', '锡', '锌', '锆', '铸', '锻',
            '钛', '铂', '钯', '钴', '镍', '铬', '钨', '钼', '锰', '锶', '锝', '锬',
            // 兵器类
            '刀', '剑', '利', '刚', '列', '刊', '划', '切', '召', '史', '司', '吏',
            '刃', '刈', '刎', '刑', '刖', '列', '刘', '则', '刚', '创', '初', '判',
            // 珠宝类
            '珍', '珠', '宝', '贝', '财', '贵', '费', '贤', '贺', '贾', '资', '赏',
            '赐', '赞', '赤', '赦', '赫', '走', '超', '越', '趋', '趣', '足', '跃',
            // 刚强类
            '强', '刚', '健', '壮', '勇', '猛', '威', '武', '力', '劲', '坚', '硬',
            '锐', '尖', '锋', '利', '快', '速', '捷', '敏', '锡', '铁', '钢', '精'
        ],
        '水': [
            // 江河湖海类
            '水', '江', '河', '湖', '海', '波', '浪', '涛', '潮', '流', '溪', '泉',
            '池', '沐', '沁', '沛', '汇', '汉', '润', '潭', '湿', '滋', '源', '溯',
            '漫', '澄', '澈', '澎', '澳', '濯', '瀚', '瀛', '灏', '雨', '雪', '雷',
            // 水流类
            '溪', '溶', '溢', '滑', '滚', '滨', '滔', '滕', '滢', '滤', '滦', '滨',
            '滩', '滪', '滫', '滬', '滭', '滮', '滯', '滰', '滱', '滲', '滳', '滴',
            // 雨雪类
            '雨', '雪', '霜', '露', '霞', '雾', '霖', '霏', '霓', '霍', '震', '霆',
            '雯', '雰', '雱', '雲', '雳', '雴', '雵', '零', '雷', '需', '霁', '霄',
            // 柔润类
            '柔', '润', '泽', '洁', '净', '清', '洋', '洪', '洲', '洽', '派', '洛',
            '洞', '津', '洗', '活', '洽', '洺', '洸', '洹', '洺', '洼', '洽', '派',
            // 智慧类（水主智）
            '智', '慧', '聪', '明', '敏', '颖', '悟', '思', '想', '念', '忆', '记',
            '识', '知', '觉', '察', '观', '见', '听', '闻', '学', '习', '研', '究'
        ]
    }

    /**
     * 根据需要补强的五行推荐汉字
     * @param {Array} needWuxing 需要补充的五行
     * @param {string} gender 性别
     * @param {number} wordCount 字数
     * @returns {Array} 推荐的汉字组合
     */
    static recommendChars(needWuxing, gender = '男', wordCount = 2) {
        const recommendations = []

        needWuxing.forEach(wuxing => {
            const chars = this.WUXING_CHARS[wuxing] || []
            const filteredChars = this.filterCharsByGender(chars, gender)

            if (wordCount === 2) {
                // 单字名
                filteredChars.slice(0, 8).forEach(char => {
                    recommendations.push({
                        name: char,
                        wuxing: [wuxing],
                        meaning: this.getCharMeaning(char),
                        score: this.calculateScore(char, needWuxing)
                    })
                })
            } else {
                // 双字名，组合不同五行
                for (let i = 0; i < Math.min(filteredChars.length, 4); i++) {
                    for (let j = 0; j < needWuxing.length; j++) {
                        const secondWuxing = needWuxing[j]
                        const secondChars = this.filterCharsByGender(
                            this.WUXING_CHARS[secondWuxing] || [],
                            gender
                        )

                        for (let k = 0; k < Math.min(secondChars.length, 3); k++) {
                            if (filteredChars[i] !== secondChars[k]) {
                                const name = filteredChars[i] + secondChars[k]
                                recommendations.push({
                                    name,
                                    wuxing: [wuxing, secondWuxing],
                                    meaning: this.getCharMeaning(filteredChars[i]) + '，' + this.getCharMeaning(secondChars[k]),
                                    score: this.calculateScore(name, needWuxing)
                                })
                            }
                        }
                    }
                }
            }
        })

        // 排序并返回前20个
        return recommendations
            .sort((a, b) => b.score - a.score)
            .slice(0, 20)
    }

    /**
     * 根据性别过滤汉字
     * @param {Array} chars 汉字数组
     * @param {string} gender 性别
     * @returns {Array} 过滤后的汉字
     */
    static filterCharsByGender(chars, gender) {
        // 男性偏好的字
        const malePreferred = ['强', '刚', '威', '猛', '雄', '豪', '杰', '勇', '毅', '坚', '锐', '锋', '钊', '铭', '昊', '旭', '阳', '炎', '烈', '炜']

        // 女性偏好的字  
        const femalePreferred = ['美', '丽', '雅', '静', '柔', '婷', '娟', '秀', '慧', '敏', '萍', '莲', '花', '芳', '蕾', '薇', '晶', '雪', '月', '琳']

        if (gender === '男') {
            return chars.filter(char => !femalePreferred.includes(char))
        } else {
            return chars.filter(char => !malePreferred.includes(char))
        }
    }
    /**
     * 获取汉字寓意
     * @param {string} char 汉字
     * @returns {string} 寓意
     */
    static getCharMeaning(char) {
        const meanings = {
            // 木系字寓意
            '林': '树木繁茂，生机勃勃',
            '森': '森林茂密，欣欣向荣',
            '松': '松柏长青，坚贞不屈',
            '梅': '梅花傲雪，品格高洁',
            '华': '才华横溢，光彩夺目',
            '芳': '芳香怡人，品德高尚',
            '竹': '竹节虚心，品格高雅',
            '柳': '柳絮飞舞，温柔多姿',
            '桂': '桂花飘香，富贵吉祥',
            '梧': '梧桐引凤，高贵典雅',
            '楠': '楠木珍贵，品质优良',
            '杰': '人中豪杰，出类拔萃',
            '青': '青春活力，朝气蓬勃',
            '翠': '翠绿如玉，生机盎然',
            '蓉': '芙蓉出水，美丽动人',
            '薇': '紫薇高雅，品味不凡',

            // 火系字寓意
            '辉': '光辉灿烂，前程似锦',
            '明': '聪明睿智，前途光明',
            '旭': '旭日东升，朝气蓬勃',
            '炜': '火光明亮，才华出众',
            '晨': '晨光初现，希望无限',
            '阳': '阳光温暖，积极向上',
            '煜': '光明照耀，前程光明',
            '烨': '火光闪耀，才华横溢',
            '晶': '晶莹剔透，纯洁美好',
            '晴': '晴空万里，心情舒畅',
            '焕': '焕然一新，生机勃勃',
            '灿': '灿烂辉煌，光彩夺目',
            '照': '光照四方，德行高尚',
            '智': '智慧超群，学识渊博',
            '慧': '慧心巧思，聪颖过人',
            '思': '思维敏捷，才思泉涌',

            // 土系字寓意
            '坤': '大地宽厚，德行深重',
            '培': '培育栽培，厚德载物',
            '城': '城池坚固，稳重可靠',
            '基': '基础扎实，根基深厚',
            '庭': '庭院幽雅，家庭和睦',
            '佳': '佳人佳景，美好如意',
            '山': '稳如泰山，坚定不移',
            '峰': '登峰造极，成就非凡',
            '岩': '坚如磐石，意志坚定',
            '玉': '温润如玉，品格高尚',
            '瑜': '美玉无瑕，完美无缺',
            '瑶': '瑶池仙境，美好纯洁',
            '琳': '美玉琳琅，珍贵美好',
            '珍': '珍贵难得，价值非凡',
            '安': '平安如意，安居乐业',
            '和': '和谐美满，温润如玉',

            // 金系字寓意
            '锐': '锐意进取，勇往直前',
            '铭': '铭记于心，永不忘怀',
            '钧': '重量单位，品格厚重',
            '锦': '锦绣前程，美好未来',
            '钢': '钢铁意志，坚强不屈',
            '刚': '刚正不阿，品格坚定',
            '锋': '锋芒毕露，才华出众',
            '鑫': '财源广进，事业兴旺',
            '钰': '珍贵美玉，品格高贵',
            '强': '自强不息，勇敢坚强',
            '健': '健康长寿，体魄强健',
            '勇': '勇敢无畏，英勇善战',
            '威': '威风凛凛，气势磅礴',
            '武': '文武双全，才能出众',
            '利': '锋利敏锐，办事干练',
            '精': '精益求精，技艺精湛',

            // 水系字寓意
            '润': '润泽万物，德行深厚',
            '源': '源远流长，根基深厚',
            '波': '波澜壮阔，气势磅礴',
            '流': '流水淙淙，生生不息',
            '海': '海纳百川，胸怀宽广',
            '江': '江河奔腾，志向远大',
            '清': '清澈透明，品格纯洁',
            '洁': '纯洁无瑕，品德高尚',
            '净': '纯净无染，心灵纯洁',
            '雨': '甘露普降，恩泽万物',
            '雪': '雪花纯洁，品格高尚',
            '露': '晨露清新，纯洁美好',
            '霞': '彩霞满天，美丽动人',
            '雯': '云彩纹理，美丽多姿',
            '柔': '温柔如水，善解人意',
            '智': '智慧如海，学识渊博',
            '聪': '聪明伶俐，智慧过人',
            '慧': '慧心如水，善解人意',
            '颖': '颖悟过人，才思敏捷',
            '敏': '敏而好学，反应迅速'
        }

        return meanings[char] || '寓意美好，品格优秀'
    }

    /**
     * 计算名字评分
     * @param {string} name 名字
     * @param {Array} needWuxing 需要的五行
     * @returns {number} 评分
     */
    static calculateScore(name, needWuxing) {
        let score = 60 // 基础分

        // 根据五行匹配度加分
        const nameWuxing = this.getNameWuxing(name)
        nameWuxing.forEach(wuxing => {
            if (needWuxing.includes(wuxing)) {
                score += 15
            }
        })

        // 字形优美度
        score += this.getCharBeautyScore(name)

        // 读音优美度
        score += this.getPronunciationScore(name)

        return Math.min(score, 100)
    }

    /**
     * 获取名字的五行属性
     * @param {string} name 名字
     * @returns {Array} 五行数组
     */
    static getNameWuxing(name) {
        const wuxing = []

        for (let char of name) {
            for (let [element, chars] of Object.entries(this.WUXING_CHARS)) {
                if (chars.includes(char)) {
                    wuxing.push(element)
                    break
                }
            }
        }

        return wuxing
    }

    /**
     * 计算字形优美度评分
     * @param {string} name 名字
     * @returns {number} 评分
     */
    static getCharBeautyScore(name) {
        // 简化处理，根据常用美字给分
        const beautifulChars = ['美', '丽', '雅', '秀', '慧', '敏', '华', '芳', '明', '辉', '杰', '俊', '英', '才']
        let score = 0

        for (let char of name) {
            if (beautifulChars.includes(char)) {
                score += 5
            }
        }

        return Math.min(score, 15)
    }

    /**
     * 计算读音优美度评分
     * @param {string} name 名字
     * @returns {number} 评分
     */
    static getPronunciationScore(name) {
        // 简化处理，返回固定分数
        return name.length === 1 ? 5 : 8
    }
}
